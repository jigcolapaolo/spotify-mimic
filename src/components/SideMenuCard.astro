---
import type { Playlist } from "@/lib/data";
import { Title } from "./Title";
import { SideMenuCardVolume } from "./SideMenuCardVolume";

interface Props {
    playlist: Playlist;
}

const { playlist } = Astro.props;
const { id, cover, title, artists } = playlist

const artistsString = artists.join(", ")

// Se unen los strings con un Intl para que tenga en cuenta todos los idiomas
---

<a 
    id={title}
    href={`/playlist/${id}`}
    class="playlist-item flex relative p-2 overflow-hidden items-center gap-5 rounded-md hover:bg-zinc-700"
>
    <picture class="h-12 w-12 flex-none">
        <img
            class="object-cover w-full h-full rounded-md"
            src={cover}
            alt={`Cover of ${title} by ${artistsString}`}
        />
    </picture>

    <div class="flex flex-auto flex-col truncate">
        <Title title={title} playlistId={id} className="text-sm" client:load />

        <span class="text-xs text-gray-400">
            {artistsString}
        </span>
    </div>

    <SideMenuCardVolume playlistId={id} client:visible />

</a>

<script>
    import tippy from "tippy.js";
  
    const app = document.getElementById("app") as HTMLDivElement;
    const playlistItems = document.querySelectorAll(".playlist-item");
  
    let tooltips: any = [];
  
    const updateTooltips = () => {
      tooltips.forEach((tooltip: any) => tooltip.destroy());
      tooltips = [];
  
      const contentShrink = app.style.gridTemplateColumns === "80px 1fr";
  
      playlistItems.forEach((item) => {
        const tooltip = tippy(item, {
          content: contentShrink ? item.id : "",
          theme: "dark",
          placement: "right",
          delay: [500, 0],
        });
        tooltips.push(tooltip);
      });
    };
  
    updateTooltips();
  
    const observer = new MutationObserver(updateTooltips);
    observer.observe(app, { attributes: true, attributeFilter: ["style"] });
</script>
  